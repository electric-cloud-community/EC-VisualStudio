# -*-Perl-*-

# gerrit.ntest -
#
# Exercise basic components of EC-Visual Studio plug-in
#
# Copyright (c) 2005-2010 Electric Cloud, Inc.
# All rights reserved

use strict;
use warnings;
use ECTest;
use ECSelenium;

require "$::gTestFileDir/visualstudio-common.ntest";

$::gtestProjectName = 'Visual Studio Plugin Test Project';

my $outcome = "";

sub importProject() {
    assertOK($::N->import(
             { file =>"$::gTestFileDir/visualStudioSystemTests.xml",
               path  => "/projects/Visual Studio Plugin Test Project",
               force => 1
             } ), "import runVisualStudioCommandLine");
   
    assertOK($::N->getProcedure($::gtestProjectName, 'executeWithAllOptionsButLog'),
    "executeWithAllOptionsButLog procedure doesn't exist");
    
    assertOK($::N->getProcedure($::gtestProjectName, 'executeWithAllOptionsButUseenv'),
    "executeWithAllOptionsButUseenv procedure doesn't exist");
    
    assertOK($::N->getProcedure($::gtestProjectName, 'executeWithAllProjectOptions'),
    "executeWithAllProjectOptions procedure doesn't exist");
    
    assertOK($::N->getProcedure($::gtestProjectName, 'executeWithAllSolutionOptions'),
    "executeWithAllSolutionOptions procedure doesn't exist");
    
    assertOK($::N->getProcedure($::gtestProjectName, 'executeWithRequiredOptions'),
    "executeWithRequiredOptions procedure doesn't exist");
    
    assertOK($::N->getProcedure($::gtestProjectName, 'validateAvailableCommands'),
    "validateAvailableCommands procedure doesn't exist");
    
    assertOK($::N->getProcedure($::gtestProjectName, 'validateExecutableDefaultProgramName'),
    "validateExecutableDefaultProgramName procedure doesn't exist");
    
    assertOK($::N->getProcedure($::gtestProjectName, 'validateExecutableProgramName'),
    "validateExecutableProgramName procedure doesn't exist");    
    
    $::gProjectImported = 1;
}


sub doSetup() {

    if(! $::gProjectImported) {
        importProject();
    }

   
}

ntest "validateAvailableCommands", {}, sub {
 
      doSetup();
      
      # run test job
     
      my $xpath = $::N->runProcedure($::gtestProjectName, 
              {procedureName => "validateAvailableCommands",
              pollInterval  => '1',
              timeout => 600,
                   actualParameter => [
                  
                  ]
      });
          
       
      # make sure it finished
      my $jobId = 0;
      my $status = "";
      
      assertOK($xpath, 'runProcedure has errors');
      if ($xpath) {
          $jobId  = $xpath->findvalue("//jobId");
          $status = $xpath->findvalue("//status");
          $outcome = $xpath->findvalue("//outcome");
  
          assertTrue($jobId && $jobId ne "",'valid job id');
          assertEq('completed',$status,"job $jobId complete");
  
          #abort if job did not finish
          if ($status ne "completed") {
              assertOK($::N->abortJob($jobId, {force => 1}));
          }
      }

      # get the job details
      $xpath = $::N->getJobDetails($jobId);
      
      my $cmd = $xpath->findvalue("//property[propertyName='visualstudioCommandLine']/value");

      my @cmdLineComponents = split(' +', $cmd);
      
      if (@cmdLineComponents){
       
             my $commandFound = 0;
       
             foreach my $cmdArgument (@cmdLineComponents) {
                    
                    if(substr($cmdArgument, 0, 1) eq '/'){
                     
                          assertTrue($cmdArgument eq '/Build' || 
                               $cmdArgument eq '/Rebuild' || 
                               $cmdArgument eq '/Clean' || 
                               $cmdArgument eq '/Deploy' || 
                               $cmdArgument eq '/log' || 
                               $cmdArgument eq '/Out' || 
                               $cmdArgument eq '/project' || 
                               $cmdArgument eq '/projectconfig' || 
                               $cmdArgument eq '/useenv', 
                               "command " . $cmdArgument . " not supported\n");
                         
                    }
                    
             }

      }
      

};

ntest "validateExecutableProgramName", {}, sub {

      doSetup();
      
      # run test job
     
      my $xpath = $::N->runProcedure($::gtestProjectName, 
              {procedureName => "validateExecutableProgramName",
              pollInterval  => '1',
              timeout => 600,
                   actualParameter => [
                  
                  ]
      });
          
       
      # make sure it finished
      my $jobId = 0;
      my $status = "";
      
      assertOK($xpath, 'runProcedure has errors');
      if ($xpath) {
          $jobId  = $xpath->findvalue("//jobId");
          $status = $xpath->findvalue("//status");
          $outcome = $xpath->findvalue("//outcome");
  
          assertTrue($jobId && $jobId ne "",'valid job id');
          assertEq('completed',$status,"job $jobId complete");
  
          #abort if job did not finish
          if ($status ne "completed") {
              assertOK($::N->abortJob($jobId, {force => 1}));
          }
      }

      # get the job details
      $xpath = $::N->getJobDetails($jobId);
      
      my $cmd = $xpath->findvalue("//property[propertyName='visualstudioCommandLine']/value");

      my @cmdLineComponents = split(' ', $cmd);
      
      if(@cmdLineComponents){
      
           assertEq($cmdLineComponents[0], '"devenv"', 'executable doesn\'t match');
       
      }

};


ntest "validateExecutableDefaultProgramName", {}, sub {

      doSetup();
      
      # run test job
     
      my $xpath = $::N->runProcedure($::gtestProjectName, 
              {procedureName => "validateExecutableDefaultProgramName",
              pollInterval  => '1',
              timeout => 600,
                   actualParameter => [
                  
                  ]
      });
          
       
      # make sure it finished
      my $jobId = 0;
      my $status = "";
      
      assertOK($xpath, 'runProcedure has errors');
      if ($xpath) {
          $jobId  = $xpath->findvalue("//jobId");
          $status = $xpath->findvalue("//status");
          $outcome = $xpath->findvalue("//outcome");
  
          assertTrue($jobId && $jobId ne "",'valid job id');
          assertEq('completed',$status,"job $jobId complete");
  
          #abort if job did not finish
          if ($status ne "completed") {
              assertOK($::N->abortJob($jobId, {force => 1}));
          }
      }

      # get the job details
      $xpath = $::N->getJobDetails($jobId);
      
      my $cmd = $xpath->findvalue("//property[propertyName='visualstudioCommandLine']/value");
      
      my @cmdLineComponents = split(' ', $cmd);
      
      if(@cmdLineComponents){
       
           assertEq($cmdLineComponents[0], 'devenv', 'executable doesn\'t match, got ' . $cmdLineComponents[0]);
      
      }
      
};

ntest "executeWithRequiredOptions", {}, sub {

      doSetup();
      
      # run test job
     
      my $xpath = $::N->runProcedure($::gtestProjectName, 
              {procedureName => "executeWithRequiredOptions",
              pollInterval  => '1',
              timeout => 600,
                   actualParameter => [
                  
                  ]
      });
          
       
      # make sure it finished
      my $jobId = 0;
      my $status = "";
      
      assertOK($xpath, 'runProcedure has errors');
      if ($xpath) {
          $jobId  = $xpath->findvalue("//jobId");
          $status = $xpath->findvalue("//status");
          $outcome = $xpath->findvalue("//outcome");
  
          assertTrue($jobId && $jobId ne "",'valid job id');
          assertEq('completed',$status,"job $jobId complete");
  
          #abort if job did not finish
          if ($status ne "completed") {
              assertOK($::N->abortJob($jobId, {force => 1}));
          }
      }

      # get the job details
      $xpath = $::N->getJobDetails($jobId);
      
      my $cmd = $xpath->findvalue("//property[propertyName='visualstudioCommandLine']/value");
      $cmd =~ s/\/Out(.*)//g;
      
      assertEq($cmd, qq{"devenv" "mySolution.sln" /Build "Release|Win32" }, 'command line doesn\'t match, got ' . $cmd);
      
};

ntest "executeWithAllSolutionOptions", {}, sub {

      doSetup();
      
      # run test job
     
      my $xpath = $::N->runProcedure($::gtestProjectName, 
              {procedureName => "executeWithAllSolutionOptions",
              pollInterval  => '1',
              timeout => 600,
                   actualParameter => [
                  
                  ]
      });
          
       
      # make sure it finished
      my $jobId = 0;
      my $status = "";
      
      assertOK($xpath, 'runProcedure has errors');
      if ($xpath) {
          $jobId  = $xpath->findvalue("//jobId");
          $status = $xpath->findvalue("//status");
          $outcome = $xpath->findvalue("//outcome");
  
          assertTrue($jobId && $jobId ne "",'valid job id');
          assertEq('completed',$status,"job $jobId complete");
  
          #abort if job did not finish
          if ($status ne "completed") {
              assertOK($::N->abortJob($jobId, {force => 1}));
          }
      }

      # get the job details
      $xpath = $::N->getJobDetails($jobId);
      
      my $cmd = $xpath->findvalue("//property[propertyName='visualstudioCommandLine']/value");
      $cmd =~ s/\/Out(.*) //g;
      assertEq($cmd, qq{"devenv" "c:/My Documents/mySolution/mySolution.sln" /Clean "Release|Win32" /useenv}, 'command line doesn\'t match, got ' . $cmd);
      
};

ntest "executeWithAllProjectOptions", {}, sub {

      doSetup();
      
      # run test job
     
      my $xpath = $::N->runProcedure($::gtestProjectName, 
              {procedureName => "executeWithAllProjectOptions",
              pollInterval  => '1',
              timeout => 600,
                   actualParameter => [
                  
                  ]
      });
      
      # make sure it finished
      my $jobId = 0;
      my $status = "";
      
      assertOK($xpath, 'runProcedure has errors');
      
      if ($xpath) {
          $jobId  = $xpath->findvalue("//jobId");
          $status = $xpath->findvalue("//status");
          $outcome = $xpath->findvalue("//outcome");
  
          assertTrue($jobId && $jobId ne "",'valid job id');
          assertEq('completed',$status,"job $jobId complete");
  
          #abort if job did not finish
          if ($status ne "completed") {
              assertOK($::N->abortJob($jobId, {force => 1}));
          }
      }

      # get the job details
      $xpath = $::N->getJobDetails($jobId);
      
      my $cmd = $xpath->findvalue("//property[propertyName='visualstudioCommandLine']/value");
      $cmd =~ s/\/Out(.*) //g;
      
      assertEq($cmd, qq{"devenv" "c:/My Documents/mySolution/mySolution.sln" /Build "Release|Win32" /project "c:/My Documents/mySolution/myProject/myProject.vbproj" /projectconfig "Release|Win32" /useenv}, 'command line doesn\'t match, got ' . $cmd);
      
};

ntest "executeWithAllOptionsButLog", {}, sub {

      doSetup();
      
      # run test job
     
      my $xpath = $::N->runProcedure($::gtestProjectName, 
              {procedureName => "executeWithAllOptionsButLog",
              pollInterval  => '1',
              timeout => 600,
                   actualParameter => [
                  
                  ]
      });
          
       
      # make sure it finished
      my $jobId = 0;
      my $status = "";
      
      assertOK($xpath, 'runProcedure has errors');
      if ($xpath) {
          $jobId  = $xpath->findvalue("//jobId");
          $status = $xpath->findvalue("//status");
          $outcome = $xpath->findvalue("//outcome");
  
          assertTrue($jobId && $jobId ne "",'valid job id');
          assertEq('completed',$status,"job $jobId complete");
  
          #abort if job did not finish
          if ($status ne "completed") {
              assertOK($::N->abortJob($jobId, {force => 1}));
          }
      }

      # get the job details
      $xpath = $::N->getJobDetails($jobId);
      
      my $cmd = $xpath->findvalue("//property[propertyName='visualstudioCommandLine']/value");
      
      $cmd =~ s/\/Out(.*) //g;
      assertEq($cmd, qq{"devenv" "c:/My Documents/mySolution/mySolution.sln" /Build "Release|Win32" /project "c:/My Documents/mySolution/myProject/myProject.vbproj" /projectconfig "Release|Win32" /useenv}, 'command line doesn\'t match, got ' . $cmd);
      
};

ntest "executeWithAllOptionsButUseenv", {}, sub {

      doSetup();
      
      # run test job
     
      my $xpath = $::N->runProcedure($::gtestProjectName, 
              {procedureName => "executeWithAllOptionsButUseenv",
              pollInterval  => '1',
              timeout => 600,
                   actualParameter => [
                  
                  ]
      });
          
       
      # make sure it finished
      my $jobId = 0;
      my $status = "";
      
      assertOK($xpath, 'runProcedure has errors');
      if ($xpath) {
          $jobId  = $xpath->findvalue("//jobId");
          $status = $xpath->findvalue("//status");
          $outcome = $xpath->findvalue("//outcome");
  
          assertTrue($jobId && $jobId ne "",'valid job id');
          assertEq('completed',$status,"job $jobId complete");
  
          #abort if job did not finish
          if ($status ne "completed") {
              assertOK($::N->abortJob($jobId, {force => 1}));
          }
      }

      # get the job details
      $xpath = $::N->getJobDetails($jobId);
      
      my $cmd = $xpath->findvalue("//property[propertyName='visualstudioCommandLine']/value");
      $cmd =~ s/\/Out(.*)//g;
      
      assertEq($cmd, qq{"devenv" "c:/My Documents/mySolution/mySolution.sln" /Build "Release|Win32" /project "c:/My Documents/mySolution/myProject/myProject.vbproj" /projectconfig "Release|Win32" }, 'command line doesn\'t match, got ' . $cmd);
      
};
